//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferencePhoto
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferencePhoto.InterfacePhoto")]
    public interface InterfacePhoto
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/PhotoExist", ReplyAction="http://tempuri.org/InterfacePhoto/PhotoExistResponse")]
        System.Threading.Tasks.Task<int> PhotoExistAsync(string caleGUI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/AddPhoto", ReplyAction="http://tempuri.org/InterfacePhoto/AddPhotoResponse")]
        System.Threading.Tasks.Task AddPhotoAsync(string caleGUI, System.DateTime dataCrearii, string eveniment, string loc, string persoane);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetNume", ReplyAction="http://tempuri.org/InterfacePhoto/GetNumeResponse")]
        System.Threading.Tasks.Task<string> GetNumeAsync(string caleGUI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetEveniment", ReplyAction="http://tempuri.org/InterfacePhoto/GetEvenimentResponse")]
        System.Threading.Tasks.Task<string> GetEvenimentAsync(string caleGUI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetLoc", ReplyAction="http://tempuri.org/InterfacePhoto/GetLocResponse")]
        System.Threading.Tasks.Task<string> GetLocAsync(string caleGUI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetDataCrearii", ReplyAction="http://tempuri.org/InterfacePhoto/GetDataCreariiResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetDataCreariiAsync(string caleGUI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetNames", ReplyAction="http://tempuri.org/InterfacePhoto/GetNamesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetPersoane", ReplyAction="http://tempuri.org/InterfacePhoto/GetPersoaneResponse")]
        System.Threading.Tasks.Task<string> GetPersoaneAsync(string caleGUI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetEvenimentList", ReplyAction="http://tempuri.org/InterfacePhoto/GetEvenimentListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetEvenimentListAsync(string cautare);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetLocList", ReplyAction="http://tempuri.org/InterfacePhoto/GetLocListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetLocListAsync(string cautare);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetPersoanaList", ReplyAction="http://tempuri.org/InterfacePhoto/GetPersoanaListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetPersoanaListAsync(string cautare);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetDataCreariiList", ReplyAction="http://tempuri.org/InterfacePhoto/GetDataCreariiListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetDataCreariiListAsync(string cautare);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/DeletePhoto", ReplyAction="http://tempuri.org/InterfacePhoto/DeletePhotoResponse")]
        System.Threading.Tasks.Task DeletePhotoAsync(string caleGUI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/SchimbareCale", ReplyAction="http://tempuri.org/InterfacePhoto/SchimbareCaleResponse")]
        System.Threading.Tasks.Task SchimbareCaleAsync(string caleGUI, string caleNouaGUI);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface InterfacePhotoChannel : ServiceReferencePhoto.InterfacePhoto, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class InterfacePhotoClient : System.ServiceModel.ClientBase<ServiceReferencePhoto.InterfacePhoto>, ServiceReferencePhoto.InterfacePhoto
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public InterfacePhotoClient() : 
                base(InterfacePhotoClient.GetDefaultBinding(), InterfacePhotoClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_InterfacePhoto.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfacePhotoClient(EndpointConfiguration endpointConfiguration) : 
                base(InterfacePhotoClient.GetBindingForEndpoint(endpointConfiguration), InterfacePhotoClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfacePhotoClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(InterfacePhotoClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfacePhotoClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(InterfacePhotoClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfacePhotoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<int> PhotoExistAsync(string caleGUI)
        {
            return base.Channel.PhotoExistAsync(caleGUI);
        }
        
        public System.Threading.Tasks.Task AddPhotoAsync(string caleGUI, System.DateTime dataCrearii, string eveniment, string loc, string persoane)
        {
            return base.Channel.AddPhotoAsync(caleGUI, dataCrearii, eveniment, loc, persoane);
        }
        
        public System.Threading.Tasks.Task<string> GetNumeAsync(string caleGUI)
        {
            return base.Channel.GetNumeAsync(caleGUI);
        }
        
        public System.Threading.Tasks.Task<string> GetEvenimentAsync(string caleGUI)
        {
            return base.Channel.GetEvenimentAsync(caleGUI);
        }
        
        public System.Threading.Tasks.Task<string> GetLocAsync(string caleGUI)
        {
            return base.Channel.GetLocAsync(caleGUI);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetDataCreariiAsync(string caleGUI)
        {
            return base.Channel.GetDataCreariiAsync(caleGUI);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetNamesAsync()
        {
            return base.Channel.GetNamesAsync();
        }
        
        public System.Threading.Tasks.Task<string> GetPersoaneAsync(string caleGUI)
        {
            return base.Channel.GetPersoaneAsync(caleGUI);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetEvenimentListAsync(string cautare)
        {
            return base.Channel.GetEvenimentListAsync(cautare);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetLocListAsync(string cautare)
        {
            return base.Channel.GetLocListAsync(cautare);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetPersoanaListAsync(string cautare)
        {
            return base.Channel.GetPersoanaListAsync(cautare);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetDataCreariiListAsync(string cautare)
        {
            return base.Channel.GetDataCreariiListAsync(cautare);
        }
        
        public System.Threading.Tasks.Task DeletePhotoAsync(string caleGUI)
        {
            return base.Channel.DeletePhotoAsync(caleGUI);
        }
        
        public System.Threading.Tasks.Task SchimbareCaleAsync(string caleGUI, string caleNouaGUI)
        {
            return base.Channel.SchimbareCaleAsync(caleGUI, caleNouaGUI);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_InterfacePhoto))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_InterfacePhoto))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return InterfacePhotoClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_InterfacePhoto);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return InterfacePhotoClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_InterfacePhoto);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_InterfacePhoto,
        }
    }
}
